[TypeScript คืออะไร]
    - เป็นภาษาที่ถูกออกแบบมาเพื่อช่วยเขียนโปรแกรมด้วย JS ให้มีประสิทธิภาพขึ้น 
    - โดยโค้ดที่ถูกเขียนด้วย TS จะถูกแปลงให้เป็น JS ในเวอร์ชั่นที่เราต้องการได้
    - หากมีการเปลี่ยนแปลงเวอร์ชั่น JS ก็ไม่จำเป็นต้องไปศึกษาใหม่

[ทำไมต้อง TypeScript]
    1. Superset ของ JS
        - สามารถใช้ทุกฟีเจอร์ใหม่ๆของ JavaScript ได้
    2. Compile ก่อนใช้งาน
        - ถ้าใช้ JS จะไม่รู้เลยว่าโค้ดทำงานถูกไหม จนกว่าจะนำโปรแกรมไปรันบน Browser 
        - แต่ TS จะคอมไพล์เพื่อตรวจสอบข้อผิดพลาดที่อาจเกิดขึ้นก่อนที่จะรันโปรแกรม ทำให้ทราบข้อผิดพลาด
    3. Static Type
        - เนื่องจาก JS เป็นภาษารูปแบบ Dynamic Type คือ ตัวแปรที่เก็บข้อมูลสามารถเปลี่ยนแปลงชนิดข้อมูลได้ตลอด อาจทำให้เกิดบัคได้
        - TS จึงพัฒนามาเพื่อแก้ปัญหาภาษารูปแบบ Dynamic Type

[Nodejs คืออะไร]
    - เป็นชุดเครื่องมือแปลคำสั่งของ JavaScript และเป็น JavaScript Runtime Environment
    - กล่าวคือ สามารถนำ JS ไปรันบน Window , Mac , Linux ได้เลย ไม่จำเป็นต้องไปรันบน Web Browser

[เริ่มใช้งาน TS]
    1. สร้างไฟล์ : <ชื่อไฟล์>.ts
    2. แปลงไฟล์ใน Terminal : 
        - tsc <ชื่อไฟล์>.ts 
        - tsc (compile ทั้งหมด)

[สร้างโปรเจ็กต์ TypeScript]
    - คำสั่ง : tsc --init
    - จะได้ tsconfig.json

    tsconfig.json : ไฟล์สำหรับการตั้งค่าการทำงานของ TypeScript Compiler ประกอบด้วย 
        1. target : "es2016"
            - เป็นการกำหนดให้คอมไพล์ออกมาเป็น JS ES2016
        2. rootDir : "./"
            - ตำแหน่งโฟลเดอร์ที่เก็บกลุ่มไฟล์ TypeScript (.ts)
        3. outDir "./dist/"
            - ตำแหน่งโฟลเดอร์ที่เก็บกลุ่มไฟล์ JavaScript (.js) ที่ผ่านการคอมไพล์
        4. include : ["src"]
            - กำหนดขอบเขตของไฟล์ที่จะคอมไพล์

[Watch Mode]
    - เป็นการสั่งคอมไพล์พร้อมกับตรวจสอบไฟล์ ทุกๆไฟล์ที่อยู่ในโปรเจ็กต์ ถ้ามีการเปลี่ยนแปลงคำสั่ง ก็จะสั่งคอมไพล์ทันที
    - ทำให้ไม่ต้องสั่งคอมไพล์เอง (คอมไพล์แบบเรียลไทม์)
    - คำสั่ง : tsc -w หรือ tsc -watch

[ชนิดข้อมูลพื้นฐาน]
    1. boolean : ตรรกศาสตร์
    2. number : ตัวเลขมีทศนิยม / ไม่มีทศนิยม
    3. string : ข้อความ

[ตัวแปร]
    - การนิยามตัวแปร 
        const <ค่าคงที่> : ชนิดข้อมูล = ค่า;
        let <ชื่อตัวแปร> : ชนิดข้อมูล = ค่า;

[Any & Unknown]
    Any : การนิยามตัวแปรที่มีชนิดข้อมูลแบบไหนก็ได้ กล่าวคือ TypeScript บอกไม่ได้ว่ามันเป็นข้อมูลแบบใด ก็จะกำหนดให้มีตัวแปรนั้นมีชนิดข้อมูลเป็น Any
        let myVar:any = "Pongsakorn"; // เป็น string
        myVar = 10; // เป็น number ก็ได้
        myVar = true ; // เป็น boolean ก็ได้
        - ประโยชน์ : เมื่อต้องการอยากให้ข้อมูลสามารถเปลี่ยนแปลงชนิดข้อมูลได้

    Unknown : ลักษณะคล้ายกับ Any แต่จะมีการตรวจสอบชนิดข้อมูลก่อนเริ่มทำงาน
        let myVar:unknown = "Pongsakorn"
        if(typeof myVar==="ชนิดข้อมูล"){
            //กระบวนการทำงาน
        }

[Type Assertion คืออะไร]
    - กระบวนการระบุชนิดข้อมูลด้วยตัวเอง สามารถระบุได้ 2 แบบ
        1. as
        2. <ชนิดข้อมูล>

[ฟังก์ชั่น 4 แบบ]
    1. แบบที่ไม่มีการรับและส่งค่า (Void)
        function ชื่อฟังก์ชั่น () {
            //คำสั่ง
        }
    2. แบบที่มีการรับค่า (Parameter)
        function ชื่อฟังก์ชั่น (Parameter:ชนิดข้อมูล) {
            // คำสั่งที่ใช้กับ Parameter
        }
    3. แบบที่มีการส่งค่า (Return)
        function ชื่อฟังก์ชั่น () :ชนิดข้อมูลที่ Return {
            return ค่าตามชนิดข้อมูล
        }
    4. แบบที่มีการรับและส่งค่า (Parameter & Return)
        function ชื่อฟังก์ชั่น (Parameter:ชนิดข้อมูล) :ชนิดข้อมูลที่ Return{
            return ค่าตามชนิดข้อมูล
        }
        
[Arrow function]
    - เป็นการเขียน function ให้มีความกระชับ มีส่วนช่วยเวลาเขียน callback
        const ชื่อฟังก์ชั่น = (Parameter) => {
            // คำสั่ง
        }

[Default Parameter]
    - เป็นการสร้างฟังก์ชั่นโดยกำหนดค่าเริ่มต้นให้กับ Parameter
        function ชื่อฟังก์ชั่น (Parameter:ชนิดข้อมูล = ค่าเริ่มต้น) {
            // คำสั่ง
        }

[Object คืออะไร]
    - ตัวแปรที่สามารถเก็บค่าได้หลายค่า เขียนอยู่ในรูป property : value
        1. property : ชื่อในการอ้างอิงข้อมูล
        2. value : ข้อมูลที่จัดเก็บใน property
    - การสร้าง Object แบบไม่ระบุชนิดข้อมูล
        const ชื่อวัตถุ = {
            property : ค่าเริ่มต้น
        }
    - การสร้าง Object แบบระบุชนิดข้อมูล
        const ชื่อวัตถุ : {property:ชนิดข้อมูล} = {ค่าเริ่มต้น}

[ฟังก์ชั่นสำหรับการรับค่า Object มาทำงาน]
    const ชื่อฟังก์ชั่น = (Parameter:{}) :void => {
        // คำสั่ง
    }

[ฟังก์ชั่นสำหรับส่งค่า Object ]
    const ชื่อฟังก์ชั่น = () : {object} => {
        return {
            property : value
        }
    }

[Excess Properties Check]
    - การตรวจสอบ Properties ที่ส่งเข้ามาทำงานในฟังก์ชั่น
    ชื่อฟังก์ชั่น({Parameter object})

[Type Aliases คือ]
    Type Aliases
        - นอกจากชนิดข้อมูลพื้นฐานในภาษา TS เราสามารถนิยามหรือสร้างชนิดข้อมูลในรูปแบบของเราได้ เรียก Type Aliases (Custom Type)
            type <ชื่อTypeAliases> = {property:type,}
        - ตัวอย่าง
            let emp1 : Employee = {name:"Pongsakorn",salary:30000}
        
    Optional Properties
        - เป็นการระบุว่า property ที่ทำงานใน Type Aliases สามารถกำหนดค่าได้หรือไม่กำหนดค่าก็ได้ ผ่านเครื่องหมาย ?
            type <ชื่อTypeAliases> = {property?:type,}

    Readonly Modifier
        - เป็นการระบุว่า property ที่ทำงานใน Type Aliases นั้น หลังจากกำหนดค่าแล้ว จะไม่สามารถแก้ไขได้ โดยใช้ readonly modifier
            type <ชื่อTypeAliases> = {readonly property: type}

[การสร้าง Array]
    Array คือ 
        - ชุดตัวแปรที่อยู่ในรูปลำดับ ใช้เก็บค่าข้อมูลให้อยู่กลุ่มเดียวกัน โดยข้อมูลจะถูกเก็บในตำแหน่งที่ต่อเนื่องกัน
        - ตัวแปรที่ใช้เก็บข้อมูลที่มีลำดับต่อเนื่อง โดยใช้ index จำแนกความแตกต่างตัวแปรแต่ละตัว
    
    คุณสมบัติ Array
        1. เก็บกลุ่มข้อมูล
        2. ข้อมูลใน Array เรียกว่า สมาชิก / element
        3. แต่ละ element จะเก็บค่าข้อมูล (value) และ index
        4. สมาชิกใน Array ต้องมีชนิดข้อมูลเหมือนกัน
        5. สมาชิกจะถูกคั่นด้วย ,

    การสร้าง Array
        1. แบบไม่กำหนดค่าเริ่มต้น
            const ชื่อตัวแปร : ชนิดข้อมูล [] = [];
        2. แบบกำหนดค่าเริ่มต้น
            const ชื่อตัวแปร : ชนิดข้อมูล [] = [element,...]
        
    การเข้าถึงสมาชิกใน Array
        1. อ้างอิงผ่าน index
        2. for loop
        3. for each

[Function Overloading]
    Function Overloading 
        - การสร้างฟังก์ชั่นที่มีชื่อเหมือนกัน แต่สามารถรับ Parameter จำนวนต่างกัน พร้อมคืนค่าที่ต่างกันได้ เช่น
            1. function sayHi() :string
            2. function sayHi(name:string) :string
            3. function sayHi(name?:unknown) :unknown

[Spread Operator]
    Spread Operator
        - เป็นรูปแบบการกระจายสมาชิกใน Array ออกมาใช้งาน

[Rest Parameter] 
    Rest Parameter
        - ใช้ส่ง Parameter (:Any) แบบ Array เข้าไปทำงานในฟังก์ชั่นโดยไม่จำกัดจำนวน

[Destructuring]   
    Destructuring
        - การกำหนด่าแบบการจับคู่ที่อยู่ใน Array หรือ Object

[Tuple]
    Tuple คือ
        1. ชุดตัวแปรที่เก็บในรูปลำดับ ใช้เก็บค่าข้อมูลในกลุ่มเดียวกัน
        2. ตัวแปรที่ใช้เก็บข้อมูลที่มีลำดับที่ต่อเนื่องกัน ซึ่งข้อมูลมีค่าได้หลายค่า และใช้หมายเลข index กำกับ

    คุณสมบัติ Tuple :
        1. เก็บกลุ่มข้อมูล
        2. ข้อมูลใน Tuple จะเรียกว่า element
        3. แต่ละ element จะเก็บค่าข้อมูล และ index ไว้
        4. คล้ายกับ Array
        5. สมาชิกจะมีชนิดข้อมูลต่างกัน หรือเหมือนกันก็ได้

    ความต่างระหว่าง Tuple และ Array
        Array
            - ขนาดมีความยืดหยุ่น (Dynamic size) สามารถเพิ่มหรือลดสมาชิกได้
            - สมาชิกภายในต้องมีชนิดข้อมูลเหมือนกัน
        Tuple
            - มีขนาดตายตัว (Fixed size)
            - สมาชิกภายในมีชนิดข้อมูลต่างกันได้ โดยต้องระบุชนิดข้อมูลกำกับ

    การสร้าง Tuple
        const ชื่อตัวแปร :[type1,type2] = [value1,value2]

    Tuple Label
        - การกำหนดชื่อกำกับภายในชนิดข้อมูลที่ทำงานใน Tuple
        const httpOK: [code: number, status: string] = [200, "OK"];

    สร้าง Type แบบ Tuple