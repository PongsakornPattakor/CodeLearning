PHP : Hypertext Processors สมัยก่อนเรียก Personal Home Page

HTML tag เป็น Static languages

PHP tag => (สามารถใช้ร่วมกับ HTML tag ได้)
    <?php : tag เปิด
    ?> : tag ปิด
    

ฟังก์ชันพื้นฐาน 
    print() : แสดงผลผ่าน browser
    echo() : แสดงผลผ่าน browser

    ความต่างของ print() & echo()
    1. print มีการส่งค่ากลับมา (return) แต่ echo จะไม่มีการส่งค่ากลับมา (void)
    2. print สามารถระบุค่าได้ตัวเดียว แต่ echo มีได้หลายตัว
    3. echo เร็วกว่า print

[ตัวแปร (Variables)]
    - ใช้เก็บข้อมูลในหน่วยความจำ เช่น เลข อักษร หรือชุดข้อความ
    การนิยาม :
        $ ชื่อตัวแปร = ค่าตัวแปร
        $ name = "First";
        $ age = 26;
    กฎการตั้งชื่อ :
        1. เป็นได้ทั้งอักษร ตัวเลข สัญลักษณ์
        2. ตัวแรกห้ามเป็นเลข
        3. ไม่ซ้ำกับ built-in function
        4. Case sensitive มีความหมายต่างกัน
        5. ตัวแปรเว้นวรรคไม่ได้

[ชนิดข้อมูลของตัวแปร] 
    1. Integer : เลขจำนวนเต็ม
    2. Float / Double : จำนวนจริงมีทศนิยม
    3. Boolean : ค่าทางตรรกศาสตร์
    4. String : ชุดข้อความ
    5. Array : ชุดของกลุ่มข้อมู,
    6. Object : กำหนดตัวแปรตามคุณสมบัติ (Attribute) โดยประกาศใช้งานผ่าน Class อาศัยแนวคิด OOP

    การแสดงชนิดข้อมลของตัวแปร
        1. gettype()
        2. settype()

[Type casting]
    คือ การเปลี่ยนชนิดของข้อมูลให้เป็นชนิดที่ต้องการ โดยใส่ชนิดข้อมูลตัวแปร ไว้หน้าตัวแปรที่ต้องการเปลี่ยน

[ค่าคงที่ (Constant)]
    การสร้างตัวแปรที่เก็บข้อมูล ให้ไม่สามารถเปลี่ยนแปลงค่าได้ มาตรฐานสากลมักจะนิยามด้วย ตัวพิมพ์ใหญ่
    การนิยาม :
        define("ชื่อตตัวแปร",ค่า);

[ฟังก์ชั่นที่ทำงานเกี่ยวกับตัวแปร (Build-in function)]
    1. isset : สำหรับตรวจสอบว่าตัวแปรมีการกำหนดค่าหรือไม่ (True/False)
    2. unset : ยกเลิกตัวแปรและคืนค่าให้หน่วยความจำ
    3. empty : ตรวจสอบว่าตัวแปรมีค่าว่างหรือเลข 0 หรือไม่ ถ้าว่างจะเป็น True
    4. is_null : สำหรับตรวจสอบว่าตัวแปรมีค่าว่างหรือไม่
    5. print_r() : สำหรับแสดงค่าตัวแปร array
    6. var_dump() : แสดงรายละเอียดตัวแปร

[ตัวแปร Superglobal]
    เป็นตัวแปรที่รับค่าตัวแปรจาก browser กับ web server ประกอบด้วย :
    1. $GLOBALS : เป็นการประกาศให้เป็นตัวแปร global เพื่อให้ทุกส่วนเรียกใช้งานได้เลย
    2. $_SERVER : เก็บค่าต่างๆของ web server ที่กำลังทำงานอยู่
    3. $_GET : เป็นตัวแปรแบบ arr ใช้เก็บค่าที่ส่งมากับ URL 
    4. $_POST : ใช้เก็บค่าที่ส่งมากับ Form แบบ post method
    5. $ENV : ตัวแปรที่จัดเก็บสภาพแวดล้อมทั่วไปและค่าต่างๆของ server
    6. $_SESSION : เก็บตัวแปร session
    7. $_COOKIE : เก็บตัวแปร cookie

[ตัวดำเนินการเปรียบเทียบ]
    1. == : เท่ากับ
    2. === : เหมือนกัน ทั้งค่าและชนิดตัวแปร
    3. != : ไม่เท่ากับ
    4. <> : ไม่เท่ากับ
    5. !=== : ไม่เหมือนกัน
    6. > : มากกว่า
    7. < : น้อยกว่า
    8. >= : มากกว่าเท่ากับ
    9. <= : น้อยกว่าเท่ากับ
    10. <=> : spaceship ส่งค่าอออกมาเป็นตัวเลข

[ตัวดำเนินการกับข้อความ]
    1. .(concatenation) : การต่อข้อความ
    2. .= : ต่อข้อความและกำหนดค่า

[ลำดับความสำคัญของตัวดำเนินการ]
    1. new                              ไม่มีลำดับในบรรทัด                             
    2. ()                               ไม่มีลำดับในบรรทัด
    3. []                               ไม่มีลำดับในบรรทัด
    4. ++ , --                          ซ้าย ไป ขวา
    5. * , / , %                        ซ้าย ไป ขวา
    6. + , -                            ซ้าย ไป ขวา
    7. < , <= , > , >=                  ซ้าย ไป ขวา
    8. == , != , === , <>               ไม่มีลำดับในบรรทัด
    9. && , ||                          ซ้าย ไป ขวา
    10. = , += , -= , *= , /= , %=      ขวา ไป ซ้าย

[ตัวดำเนินการอื่นๆ]
    1. comma (,) : คั่น argument สำหรับรับส่งค่าในฟังก์ชั่น
    2. operator พิเศษ เช่น
        new สำหรับการสร้าง class(OOP)
        -> สำหรับการสร้าง class(OOP)
    3. array operator
    4. ternary operator
    5. Execution operator (`) : ใช้ใส่คำสั่ง command line
    6. Error Suppression operator (@) : ส่วนที่ให้โปรแกรมมองข้ามกรณีที่มีข้อผิดพลาดเกิดขึ้น

[โครงสร้างควบคุม (Control structure)]
    กลุ่มคำสั่งที่ควบคุมการทำงานโปรแกรม
    1. แบบลำดับ (Sequence)
    2. แบบมีเงื่อนไข (Condition)
    3. แบบบทำซ้ำ (Loop)

[ตัวดำเนินการทางตรรกศาสตร์]
    1. && : AND
    2. || : OR 
    3. ! : NOT
    4. and 
    5. or 
    6. not

[Ternary operator]
    (เงื่อนไข) ? คำสั่งเมื่อเงื่อนไขจริง : คำสั่งเมื่อเงื่อนไขเท็จ;

[ความต่างของ Loop]
    - for : ใช้กับการซ้ำที่รู้จำนวนรอบ
    - while : ใช้กับการซ้ำที่ไม่รู้จำนวนรอบ
    - do...while : ให้ลองทำก่อน 1 รอบ แล้วค่อยซ้ำถ้าเงื่อนไขเป็นจริง

    คำสั่งเกี่ยวกับ Loop 
        - break ถ้าโปรแกรมพบคำสั่งนี้้ ก็จะเด้งออกจาก Loop
        - continue ถ้าเจอคำสั่งนี้ จะหยุดทำงานคำสั่งถัดไป แล้ววนกลับไปเริ่ม Loop ให้ไม่สามารถเปลี่ยนแปลงค่าได้
        - exit คำสั่งที่ให้โปรแกรมหยุดทำงาน (ใช้ในกรณีที่เกิดข้อผิดพลาดขึ้น)

[ฟังก์ชั่นคืออะไร]
    ความหมาย 1 : ชุดคำสั่งที่นำมาเขียนรวมกัน เพื่อเรียกใช้งานตามวัตถุประสงค์ และลดความซ้ำซ้อนในการเขียนคำสั่งบ่อยๆ
    ความหมาย 2 : โปรแกรมย่อยที่นำเข้ามาเป็นส่วนหนึ่งของโปรแกรมหลัก เพื่อให้สามารถเรียกใช้งานได้โดยไม่ต้องเขียนคำสั่งใหม่

    ชนิดฟังก์ชั่น
        1. ฟังก์ชั่นมาตรฐาน (Built-in function)
        2. ฟังก์ชั่นที่ผู้ใช้สร้างเอง (User-Defint function)

[ขอบเขตตัวแปร]
    1. Global Variables : ถ้ามีการใช้ตัวแปร global ใน function ต้องมีการระบุ global ด้วย 
    2. Local Variables : ใช้ได้เฉพาะในขอบเขต ที่มีการประกาศใช้ ถ้าจะใช้นอกขอบเขต ต้องแปลงให้เป็น global v ด้วย $Globals ["ชื่อตัวแปร"] ก่อน

[เรียกใช้งานตัวแปร และฟังก์ชั่นจากไฟล์ด้านนอก]
    1. include() : ฟังก์ชั่นสำหรับโหลดไฟล์เข้ามาทำงาน โดยทำงานตั้งแต่เริ่มต้นจนจบโปรแกรม ถ้าหาไฟล์ไม่เจอจะแจ้งเตือนข้อผิดพลาด (warning) แล้วข้ามไปทำงานส่วนอื่นต่อ
    2. include_one() : ทำงานเหมือน include() แต่จะเรียกใช้งานไฟล์แค่ครั้งเดียว
    3. require() : ฟังก์ชั่นสำหรับโหลดไฟล์เข้ามาทำงาน โดยทำงานตั้งแต่เริ่มต้นจนจบโปรแกรม ถ้าหาไฟล์ไม่เจอจะแจ้งเตือนข้อผิดพลาดและหยุดการทำงานของโปรแกรม
    4. require_one() : ทำงานเหมือน require() แต่จะเรียกใช้งานไฟล์แค่ครั้งเดียว

[ประเภท Array]
    1. Array แบบเดี่ยว
    2. Array แบบจับคู่ (Associated array)

    รูปแบบการสร้าง Array
        1. array() : ใช้ฟังก์ชั่น array(สมาชิก1,สมาชิก2,...)
        2. range() : range(เริ่มต้น,สิ้นสุด,ค่าความต่าง)

    การเข้าถึงสมาชิกด้วย For Loop
        - count() : นับจน. สมาชิกใน arr 
        - array_count_values() : นับความถี่ข้อมูลใน arr ที่มีค่าซ้ำกัน

    การเข้าถึงสมาชิกด้วย Foreach
        - foreach($arr as $key => $value)

    การเข้าถึงสมาชิกด้วย list
        - ใช้ list() ในการอ่านค่า array ทั้งข้อมูลและ index แล้วเก็บลงในตัวแปร 2 ตัวแปร

[Array 2 มิติ]
    - arr ที่มีข้อมูลสมาชิกภายในเป็น arr (arr ซ้อน arr)
    - การเข้าถึง : แถว => คอลัมน์

[ฟังก์ชั่นเพิ่มและลบสมาชิกใน arr]
    - array_push() : ใช้เพิ่มสมาชิกในตำแหน่งสุดท้าย
    - array_pop() : ใช้ลบสมาชิกในตำแหน่งสุดท้าย
    - array_unshift() : ใช้เพิ่มสมาชิกในตำแหน่งแรก
    - array_shift() : ใช้เพิ่มสมาชิกในตำแหน่งแรก
    - array_splice($arr,ตำแหน่งที่จะลบ,จำนวนที่จะลบ,ค่าที่จะแทรก) : ใช้ลบและเพิ่มสมาชิกในตำแหน่งที่ต้องการ

[ฟังก์ชั่นการเรียงสมาชิกใน arr]
    1. sort()
        - ถ้าข้อมูลเป็นเลข จะเรียงจาก น้อย->มาก
        - ถ้าข้อมูลเป็นข้อความ จะเรียงจาก พยัญชนะ->สระ
    2. rsort()
        - ถ้าข้อมูลเป็นเลข จะเรียงจาก มาก->น้อย
        - ถ้าข้อมูลเป็นข้อความ จะเรียงจาก สระ->พยัญชนะ

[ฟังก์ชั่นการเรียงลำดับ arr แบบจับคู๋]
    1. asort()
    2. arsort()
    3. ksort() : เรียง index จาก น้อย->มาก
    4. krsort() : เรียง index จาก มาก->น้อย

[ฟังก์ชั่นการสลับค่าใน arr]
    1. shuffle() : จะสุ่มสลับไปเรื่อยๆ
    2. array_reverse() : จะเรียงลำดับสมาชิกแบบย้อนกลับแล้วเก็บลงในตัวแปร

[ฟังก์ชั่นเกี่ยวกับ Index และ Value]
    1. array_keys() : ดึง index ทั้งหมดของ arr
    2. array_values() : ดึง value ทั้งหมดของ arr
    3. array_flip() : สลับ index กับ value
    4. array_unique() : ลบค่าข้อมูลซ้ำใน arr

[ฟังก์ชั่นการค้นหาข้อมูล ใน arr]
    1. array_key_exists(key ทีจะค้นหา,arr) : ตรวจสอบว่ามี index นี้ ใน arr มั้ย (true/false)
    2. in_array() : ตรวจสอบว่ามี value นี้ ใน arr มั้ย (true/false)

[ฟังก์ชั่นการรวม arr]
    1. array_merge() : รวม arr หากมี index ซ้ำกัน จะนำค่าข้อมูล arr ชุดหลัง "มาทับ"ข้อมูล arr ขุดหน้า
    2. array_merge_recursive() : รวม arr หากมี index ซ้ำกัน จะนำค่าข้อมูล arr ชุดหลัง "มาต่อท้าย"ข้อมูล arr ชุดแรก
    3. array_combine() : รวม arr โดยใช้ arr ตัวแรกเป็น index และใช้ arr ตัวที่สองเป็น value

[การเปรียบเทียบ String]
    1. strcmp() : เทียบความสำคัญของ String ตัวพิมพ์ใหญ่จะมีค่ามากกว่า
        ผลลัพธ์
        - เท่ากัน 2 ค่า มีค่าเท่ากับ 0
        - str1 < str2 มีค่า <0
        - str1 > str2 มีค่า >0
    2. strcasecmp() : คล้าย strcmp() แต่ตัวพิมพ์ใหญ่จะมีค่าเท่ากับตัวพิมพ์เล็ก
        ผลลัพธ์
        - เท่ากัน 2 ค่า มีค่าเท่ากับ 0
        - str1 < str2 มีค่า <0
        - str1 > str2 มีค่า >0
    3. strspn() : หาจำนวนตัวอักษรใน str1 ที่พบใน str2 ถ้าเหมือนกันจะค้นหาตัวต่อไปจนกว่าจะไม่พบ
        ผลลัพธ์
        - จำนวนอักษรที่พบ
    4. strcspn() : หาจำนวนตัวอักษรใน str1 ที่ไม่พบใน str2
        ผลลัพธ์
        - จำนวนอักษรที่ไม่พบ
    
[หาความยาว String]
    - strlen()

[การตัดช่องว่าง String]
    1. trim() : ตัดช่องว่างซ้าย-ขวา ของข้อความ
    2. ltrim() : ตัดช่องว่างซ้าย
    3. rtrim() : ตัดช่องว่างขวา

[การเปลี่ยนรูปแบบตัวอักษร]
    1. strtolower() : เปลี่ยนทุกตัวเป็นพิมพ์เล็ก
    2. strtoupper() : เปลี่ยนทุกตัวเป็นพิมพ์ใหญ่
    3. ucwords() : เปลี่ยนอักษรตัวแรกของแต่ละคำเป็นพิมพ์ใหญ่
    4. ucfirst() : เปลี่ยนอักษรตัวแรกของข้อความเป็นพิมพ์ใหญ่

[การค้นหาตัวอักษรใน string]
    1. strstr($str,ข้อความที่จะหา) : ค้นหาอักษรหรือ String ย่อย ตัวพิมพ์เล็ก/ใหญ่ มีความหมายต่างกัน
    2. stristr($str,ข้อความที่จะหา) : ค้นหาอักษรหรือ String ย่อย ตัวพิมพ์เล็ก/ใหญ่ มีความหมายเหมือนกัน

[การเปลี่ยนข้อความใน string]
    1. str_replace() : เปลี่ยน string ย่อยที่พบเป็น string ย่อยใหม่
    2. strrev() : กลับค่า string
    3. str_repeat() : ทำซ้ำ string

[การเข้าและถอดรหัส string]
    1. md5($str) / sha1($str) : เข้ารหัสโดยคำนวณ String และส่งค่า hash กลับมา
    2. crypt($str,salt) : เข้ารหัสโดยส่มเวลามาทำงานร่วมด้วย
    3. base64_encode() : เข้ารหัส String ด้วย base_64
    4. base64_decode() : ถอดรหัส String ด้วย base_64

[การจัดการตัวเลข]
    1. ceil() : ปัดเศษทศนิยมขึ้นทุกกรณี
    2. floor() : ปัดเศษทศนิยมทิ้งทุกกรณี แล้วคืนค่าเป็นจำนวนเต็มแบบ float
    3. round() : 
        - ปัดเศษทศนิยม >= 5 ขึ้น 
        - ปัดเศษทศนิยม <5 ทิ้ง

[การจัดรูปแบบตัวเลข]
    - number_format()

[การจัดการวันที่ และเวลา]
    1. time() : แสดงวันที่และเวลาปัจจุบัน ในรูปแบบ Unix Timestamp แสดงเป็นหน่วย วินาที (s)
    2. date() : แสดงวันที่และเวลาโดยการกำหนดรูปแบบลงใน function ผ่าน parameter เช่น
        {
            d/j : d = วันที่ 2 หลัก (01-31)
                : j = วันที่ 1 หลัก (1-31)
            
            D/l : D = แสดงวันแบบตัวย่อ 3 ตัวอักษร (sun, mon)
                : l = แสดงวันแบบเต็ม

            W : แสดงลำดับสัปดาห์ของปี 0-52 (1 ปี มี 53 สัปดาห์)

            F/M : F = แสดงชื่อเดือนแบบเต็ม
                : M = แสดงชื่อเดือนแบบย่อ 3 ตัวอักษร (Jan,Feb)
            
            m/n : m = แสดงชื่อเดือนด้วยตัวเลข 2 หลัก (01-12)
                : n = แสดงชื่อเดือนด้วยตัวเลข 1 หลัก (1-12)
            
            t : แสดงจำนวนวันของเดือน เช่น 28-31

            y/Y : y = แสดงปี ค.ศ. เลขท้าย 2 หลัก
                : Y = แสดงปีค.ศ.แบบเต็ม

            a/A : a = แสดงเวลาช่วงเช้าหรือบ่าย am , pm
                : A = แสดงเวลาช่วงเช้าหรือบ่าย AM , PM

            g/h : g = แสดงชั่วโมงแบบ 12 ชม. (1-12)
                : h = แสดงชั่วโมงแบบ 12 ชม. (00-12)
            
            G/H : G = แสดงชั่วโมงแบบ 24 ชม. (0-23)
                : H = แสดงชั่วโมงแบบ 24 ชม. (00-23)

            i/s : i = แสดงนาที
                : s = แสดงวินาที

            c : แสดงวันที่ตามมาตรฐาน ISO-8601
        
            r : รูปแบบวันที่ในอีเมล RFC 2822
        }
    3. getdate() มีการเก็บค่าเป็น array
        {
            hours/minutes/second : ชั่วโมง/นาที/วินาที
            mday/wday/mon/year/yday : วันที่/วันของสัปดาห์/ชื่อเดือน/ปี/วันในแต่ละปีเป็นตัวเลข
            weekday/month : ชื่อวันในแต่ละสัปดาห์/ชื่อเดือนแบบเต็ม
        }
    4. checkdate() :ตรวจสอบความถูกต้องของวัน แล้วส่งกลับมาเป็นค่า boolean
        {
            int (month/day/year) : เดือน/วันที่/ปี   
        }