JavaScript คืออะไร 
    เป็นภาษาพัฒนาร่วมกับ HTML เพื่อให้เว็บตอบสนองกับ user 
    เป็นภาษาที่ทำงานฝั่งผู้ใช้ โดยจะถูกเขียนเพื่อประมวลผลคำสั่ง เช่น การแสดงข้อความ การแจ้งเตือน
    ความสามารถ :
        - เปลี่ยนแปลงรูปแบบของ HTML, CSS ได้
        - ตรวจสอบความถูกต้องของข้อมูลได้
        - ตรวจสอบ browser ของผู้ใช้ได้
        - เก็บข้อมูลของผู้ใช้ได้ เช่น การใช้ cookie, local storage

รูปแบบการเขียน JavaScript
    1. แบบ Internal คือกำหนด JavaScript ไว้ในส่วน  <head></head> หรือ <body></body>
        - <script type= "text/javascript"></script>
    2. แบบ External คือกำหนด JavaScript ไว้เป็นไฟล์ด้านนอกที่มีนามสกุล .js 
        - <script src= "ชื่อไฟล์.js"></script>

การแสดงข้อมูล
    - document.write("ข้อความที่จะแสดง")
    - alert("ข้อความแจ้งเตือน") สำหรับแจ้งเตือนผู้ใช้
    - console.log("ข้อความ หรือ ตัวแปร") สำหรับ debug ต่างๆ แต่จะไม่แสดงผลหน้าเว็บ
    - console.error("แจ้งข้อผิดพลาดใน console")
    - console.warn("แจ้งเตือนใน console")

ตัวแปร => ชื่อที่ถูกนิยามขึ้นเพื่อเก็บค่าข้อมูล โดยจะเป็นรูปแบบ Dynamic typing คือไม่ต้องประกาศชนิดตัวแปร

รูปแบบการตั้งชื่อตัวแปร
    1. ขึ้นต้นด้วยอักษรภาษาอังกฤษ
    2. ห้ามขึ้นต้นด้วยตัวเลขหรือสัญลักษณ์พิเศษ
    3. สามารถขึ้นต้นด้วย $ และ _ ได้
    4. มีลักษณะ case sensitive
    5. ไม่ซ้ำกับคำสงวน

การนิยามตัวแปร
    นิยามแบบเก่า
        - var ชื่อตัวแปร;
        - var ชื่อตัวแปร = ค่าเริ่มต้น;
        - var ชื่อตัวแปร = ค่าเริ่มต้น, ชื่อตัวแปร = ค่าเริ่มต้น;
    นิยามแบบใหม่
        - let ชื่อตัวแปร; =>กำหนดตัวแปร เปลี่ยนแปลงค่าได้
        - let ชื่อตัวแปร = ค่าเริ่มต้น;
        - let ชื่อตัวแปร = ค่าเริ่มต้น, ชื่อตัวแปร = ค่าเริ่มต้น;
        - const ชื่อตัวแปร; => กำหนดค่าคงที่ เปลี่ยนแปลงค่าไม่ได้

Data type   
    1. boolean => true/false
    2. number => ตัวเลขไม่มีทศนิยม (20) , ตัวเลขมีทศนิยม (3.14)
    3. string => ข้อความ ("First")
    4. object => ข้อมูลเชิงวัตถุ ({firstName:"Pongsakorn" , lastname:"Pattakor" , age:20})
    5. array => ชุดข้อมูล (["มะม่วง", "มะละกอ", "ส้ม"])

หัวข้อที่เกี่ยวกับตัวแปร
    1. typeof => เช็คชนิกข้อมูล
    2. null => ไม่มีการกำหนดค่า (จะถูกกำหนดโดยผู้เขียน)
    3. undefined => ไม่มีการกำหนดค่า (ค่าเริ่มต้นโปรแกรม)

การแปลงชนิดข้อมูล (Type conversion)
    1. แปลงจาก String เป็น Number
        - x = parseInt('1.2');
        - x = parseFloat('1.2');
        - ใช้เครื่องหมาย + ด้านหน้า
    2. แปลงจาก Number เป็น String   
        - ใช้เครื่องหมาย "" + ตัวแปร หรือค่าที่เป็นตัวเลข
        - ใช้  toString() เช่น x.toString()

Array => ตัวแปรที่เก็บชุดข้อมูลที่มีลำดับต่อเนื่องให้อยู่ในกลุ่มเดียวกัน โดยใช้หมายเลขกำกับ(index) เพื่อจำแนกความแตกต่างตัวแปรแต่ละตัว
    วิธีที่ 1 : สร้าง Array โดยใช้คำสั่ง Array()
        let ชื่ออาร์เรย์ = new Array();
        let ชื่ออาร์เรย์ = Array(สมาชิกที่1, สมาชิกที่2,...);
    วิธีที่ 2 : สร้างโดยใช้เครื่องหมาย []
        let ชื่ออาร์เรย์ = [สมาชิกที่1,สมาชิกที่2,...];

ตัวดำเนินการทางคณิต
    1. Operator : + , - , * , / , % , **(ยกกำลัง)
    2. Operand

ตัวดำเนินการเปรียบเทียบ เก็บค่าในรูป boolean
    1. == : เท่ากับ
    2. != : ไม่เท่ากับ
    3. > : มากกว่า
    4. < : น้อยกว่า
    5. >= : มากกว่าเท่ากับ
    6. <= : น้อยกว่าเท่ากับ

ตัวดำเนินการทางตรรกศาสตร์
    1. && : and
    2. || : or
    3. ! : not

ตัวดำเนินการเพิ่มค่า-ลดค่า
    1. ++a : เพิ่มค่า a ก่อนแล้วค่อยนำไปใช้
    2. a++ : ใช้ค่า a ก่อน แล้วค่อยเพิ่มค่า
    3. --b : ลดค่า b ก่อนแล้วค่อยนำไปใช้
    4. b-- : ใช้ค่า b ก่อน แล้วค่อยลดค่า

Compound assignment
    1. +=
    2. -=
    3. *=
    4. /=
    5. %=

โครงสร้างควบคุม (Control structure) => กลุ่มคำสั่งที่ใช้ควบคุมการทำงานของโปรแกรม ซึ่งการใช้งานเหมือน Java เลย
    1. แบบลำดับ (Sequence)
    2. แบบมีเงื่อนไข (Condition)
    3. แบบทำซ้ำ (Loop)

ค่า null, undefined และ NaN
    1. null คือ ตัวแปรที่ไม่มีค่าใดๆเลย ไม่สามารถนำไปคำนวณใดๆได้  แต่หากเปรียบเทียบกับเงื่อนไข จะมีค่าเท่ากับ false
        -   let a = null;
            if(!a){ (หมายถึง if not false)
                alert("a is null");
            } else {
                alert("a is not null")
            }
    2. undefined คือ ตัวแปรที่ประกาศเอาไว้แต่ไม่ได้กำหนดค่า
        -   let a;
        -   alert(a);
    3. NaN (Not a Number) คือ การนำตัวแปรที่ไม่ใช่ตัวเลขไปคำนวณทางคณิตศาสตร์
        -   let a = 10;
        -   let b = "x";
        -   alert(10-b); (ผลการลบจาก int กับ String จะทำให้ได้ค่า NaN ออกมา)

ฟังก์ชั่น
    ความหมาย 1 : ชุดคำสั่งที่เขียนรวมกันเป็นกลุ่มเพื่อเรียกใช้งานตามวัตถุประสงค์และลดความซ้ำซ้อนของคำสั่งที่ใช้งานบ่อย
    ความหมาย 2 : โปรแกรมย่อยที่นำเข้ามาเป็นส่วนหนึ่งของโปรแกรมหลัก เพื่อให้เรียกใช้งานได้โดยไม่จำเป็นต้องเขียนโค้ดใหม่

รูปแบบฟังก์ชั่น
    1. ฟังก์ชั่นที่ไม่มีการรับและส่งค่า (No recieve & No send)
        -   function ชื่อฟังก์ชั่น(){
                //คำสั่ง
            }
        การเรียกใช้งาน:
            - ชื่อฟังก์ชั่น ();
    2. ฟังก์ชั่นที่มีการรับค่ามาทำงาน (Recieve)
        -   function ชื่อฟังก์ชั่น(parameter1,parameter2,...){
                //กลุ่มคำสั่ง
            }
        การเรียกใช้งาน:
            - ชื่อฟังก์ชั่น (argument1,argument2,...)
    3. ฟังก์ชั่นที่มีการส่งค่าออกมา (Send)
        -   function ชื่อฟังก์ชั่น(){
                return ค่าที่จำส่งออก
            }
        การเรียกใช้งาน :
            - ชื่อฟังก์ชั่น ();
    4. ฟังก์ชั่นที่มีการรับค่าเข้ามาทำงานและส่งออกค่าออกไป (Recieve & Send)
        -   function ชื่อฟังก์ชั่น(parameter1,parameter2,...){
                return ค่าที่จะส่งออกไป;
            }
        การเรียกใช้งาน:
            - ชื่อฟังก์ชั่น (argument1,argument2,...)
    5. ฟังก์ชั่นแบบกำหนดค่าเริ่มต้น
        -   function ชื่อฟังก์ชั่น(name="Pongsakorn",parameter2,...){
                //คำสั่งต่างๆ
            }

Array properties & function
    1. หาจำนวนสมาชิก => let x = arr.length;
    2. เรียงลำดับ
        - let y = arr.sort();
        - let z = arr.reverse();
    3. สมาชิกตัวแรก => let first = arr[0];
    4. สมาชิกตัวสุดท้าย => let last = arr[arr.length-1];
    6. เพิ่มสมาชิก => arr.push(parameter);

เข้าถึงสมาชิกด้วย for each
    let arr = ["red","green","blue"];
    arr.forEach(myData);

    function myData(item){
        console.log(item);
    }

แปลง Array เป็น String
    1. แปลงเป็น String => arr.toString();
    2. นำค่าแต่ละค่าในตัวแปร array มารวมเป็นข้อความ และส่งกลับค่าเป็นข้อความที่มีตัวคั่นค่าตัวแปรแต่ละค่า
    3. เอาตัวสุดท้ายออก => arr.pop();

การรวม Array
    let x = arr.concat(arr1,arr2);

เรียงลำดับ Array แบบตัวเลข
    let x = [5,3,-5,8,4,-10];
    1. จากน้อยไปมาก
    x.sort(function(a,b){
        return a-b;
    })
    2. จากมากไปน้อย
    x.sort(function(a,b){
        return b-a;
    })

๋JavaScript Object
    let ชื่อวัตถุ = {propertyName1:value1 ,  propertyName2:value2}
    การเข้าถึงข้อมูล
        - ชื่อวัตถุ.propertyName
    การเรียกใช้งาน
        - ชื่อวัตถุ.methodName();

การยืนยันด้วย confirm() => เป็นหน้าต่างสอบถามการยืนยันจาก user โดยผลลัพธ์จะมีค่าทางตรรกศาสตร์
    confirm("ข้อความ");
        - True เมื่อผู้ใช้กด Ok
        - False เมื่อผู้ใช้กด Cancel

HTML DOM (Document Object Model)
    เมื่อโหลดหน้าเว็บเสร็จแล้ว Web Browser จะสร้าง DOM ของหน้านั้นขึ้นมา โดยมอง HTML เป็นโครงสร้างต้นไม้ (ก้อน Object)

คุณสมบัติของ HTML DOM
    1. เข้าถึงและเปลี่ยนแปลงคุณสมบัติทั้งหมดของ Element ในหน้าเว็บได้
    2. ควบคุมและเปลี่ยนรูปแบบ CSS ได้
    3. สามารถตอบสนองกับทุกเหตุการณ์ที่เกิดขึ้นในหน้าเว็บได้

การเข้าถึง Element ผ่าน ID , Tag , Class
    1. document.getElementById("ชื่อไอดี");
    2. document.getElementByTagName("ชื่อแท็ก");
    3. document.getElementByClassName("ชื่อคลาส");
        - แต่แนะนำให้ใช้ document.querySelector("ชื่อคลาส") แทนมากกว่า

DOM Document
    ดำนเนิการผ่าน method => element.setAttribute(attribute,value)
    1. เปลี่ยนเนื้อหา HTML : element.innerHTML
    2. เปลี่ยนเนื้อหา Text : element.innerText
    3. เปลี่ยน style Element : element.style.properties = value1

DOM Nodes
    1. สร้าง element ใหม่ => document.createElement(element)
    2. ลบ node ลูก => document.removeChile(element)
    3. นำ element ไปต่อใน node แม่ => document.appendChild(element)
    4. แทนที่ element => document.replaceChild(new,old)

DOM CSS
    1. เพิ่ม class style => element.classList.add("class");
    2. ลบ class style => element.classList.remove("class");
    3. สลับ class style => element.classList.toggle("class");
    4. เปรียบเทียบ class style => element.classList.contains("class");

DOM Event => เหตุการณ์ที่เกิดขึ้นกับ element เช่น การคลิ้ก การเคลื่อนย้ายเมาส์ ยกตัวอย่าง event เช่น
    1. onfocus = "" : เมื่อ element นั้นมีการโฟกัส => ใช้ร่วมกับ select, text, textarea
    2. onblur = "" : เมื่อ element นั้นสูญเสียการโฟกัส => ใช้ร่วมกับ select , text , textarea
    3. onchange = "" : เมื่อผู้ใช้เปลี่ยนแปลงค่าในฟอร์มรับข้อมูล => ใช้ร่วมกับ select , text , textarea
    4. onselect = "" : เมื่อผู้ใช้ ใช้เมาส์ลาก ในช่องข้อความ => ใช้ร่วมกับ text , textarea
    5. onsubmit = "" : เมื่อผู้ใช้ กด submit => ใช้ร่วมกับ form
    6. onMouseover = "" : เกิดเมื่อ object นั้นถูกเลื่อน mouse pointer ไปทับ => ใช้ร่วมกับ a , div
    7. onMouseout = "" : เกิดเมื่อ object นั้นถูกเลื่อน mouse pointer ที่ทับอยู่ออกไป => ใช้ร่วมกับ a , div
    8. onclick = "" : เกิดเมื่อ object นั้นถูกคลิก => ใช้ร่วมกับ a , button , checkbox , radio , reset , submit
    9. onload = "" : เกิดเมื่อโหลดเอกสารเสร็จ => ใช้ร่วมกับ body
    10. onunload = "" : เกิดเมื่อยกเลิกการโหลด เช่น คลิกปุ่ม stop => ใช้ร่วมกับ body

Event Listener => เหตุการณ์ที่เกิดกับ element แต่รูปแบบการเขียนจะเขียนในฝั่ง JavaScript ทั้งหมด ไม่มาเขียนใน HTML โดยจะแนะนำให้เขียนด้วยวิธีนี้ดีกว่า
    โครงสร้าง : element.addEventListener(event,callback); // calback คือ ฟังก์ชั่นที่เราอยากให้ทำงาน
