Arrow function
    เป็นรูปแบบการเขียน function ให้มีความกระชับขึ้น ในกรณีที่คำสั่งไม่เยอะ
    แบบเดิม :
        function fullname (fname,lname) {
            return fname+lname;
        }
    แบบใหม่ :
        fullname=(fname,lname)=>fname+lname

String
    Multi-line string : สร้างข้อความยาวได้โดยที่ขึ้นบรรทัดใหม่แล้วไม่มีข้อผิดพลาด
    Interpulation : สามารถแทรกตัวแปรลงใน String ได้ ด้วย ${ตัวแปร}

Spread operator
    ใช้กระจายสมาชิกใน Array ออกมาใช้งาน โดยเติมเครื่องหมาย ...หน้าตัวแปร Array

Rest parameter
    ใช้ส่งค่า parameter เข้าไปใน function โดยไม่จำกัดจำนวน ด้วยเครื่องหมาย ...

Destructuring
    เป็นการกำหนดค่าที่อยู่ใน array ให้กับตัวแปร โดยใช้วิธีการจับคู่

Function
    - join("เครื่องหมายที่จะคั่น") : เป็นการแปลง array เป็น string
    - concat(arr) : เป็นการต่อ array
    - push(ค่าที่จะเพิ่ม) : เพิ่มค่าลงไปต่อท้ายใน array
    - pop() : นำค่าสุดท้ายใน array ออก
    - shift() : นำค่าแรกใน array ออก
    - unshift(ค่าทีจะเพิ่ม) : เพิ่มค่าลงไปหน้าสุดใน array
    - splice(ตำแหน่งที่จะลบ,จำนวนที่จะลบ,ค่าที่จะแทรก) : ลบช่วงสมาชิก
    - slice(ตำแหน่งเริ่มต้น,ตำแหน่งสุดท้าย+1) : ดึงช่วงสมาชิกที่เลือกมาใช้

การ Loop ข้อมูลใน Array
    - For loop
    - For each : ใช้ loop element แต่ละตัวใน array แต่ไม่สามารถใช้ break , continue ได้
    - For of : สามารถเขียน break , continue ได้

การค้นหาข้อมูล ใน Array
    - indexOf(ข้อมูล) : ผลการค้นหา จะได้ตำแหน่ง index ที่ค้นเจอ ถ้าไม่เจอจะได้ -1
    - find(ข้อมูล) : ผลการค้นหา จะได้ข้อมูลที่ค้นเจอ ถ้าไม่เจอจะได้ undefined
    - findIndex(ข้อมูล) : ผลการค้นหา จะได้ตำแหน่ง index ที่ค้นเจอ ถ้าไม่เจอจะได้ -1

Array Map
    - array.map(callback=>{})
    - สร้าง array ใหม่จากค่าที่ถูกเปลี่ยนแปลงตามฟังก์ชันที่กำหนด ซึ่งจะมีสมาชิกจำนวนเท่าเดิม

Array filter
    - array.filter((e,i)=>{})
    คัดกรองสมาชิกใน array ที่ผ่านเงื่อนไขตามกำหนด แล้วจับแยกไปเก็บใน array อีกก้อนหนึ่ง แล้วส่งกลับออกมาทำงาน

Array reduce
    - array.reduce((ค่าที่ถูกประมวลผล,e)=>{},ค่าเริ่มต้น)
    นำสมาชิกใน array มาดำเนินการ แล้วได้ค่านึงออกไป

Asynchronous หรือ Non-blocking
    JavaScript จะมีการทำงานแบบ Asynchronous คือการทำงานแบบไม่ต่อเนื่องกัน ซึ่งงานบางส่วนที่ต้องใช้เวลาในการทำงาน จะถูกย้ายไปทำงานเบื่องหลัง แต่งานอื่นๆที่ทำเสร็จก่อน ก็จะข้ามไปทำงานคำสั่งถัดไปเลย

คำสั่ง Asynchronous
    - setTimeout
    - setInterval
    - promise
คำสั่ง Synchronous
    - confirm : รอการยืนยันจาก user

Callback
    อาศัย callback function คือ ฟังก์ชั่นที่จะถูกเรียกใช้งานเมื่ออีกฟังก์ชั่นทำงานเสร็จ

Promise
    - การใช้ callback ซ้อนกันหลายชั้น ทำให้เกิดปัญหาที่อ่านโค้ดยาก เลยทำให้มี promise มาแก้ปัญหาส่วนนี้
    - โครงสร้าง : 
        Promise(function(resolve,reject){

        })
        Promise จะมี 3 สถานะ คือ
            - pending : เป็นสถานะเริ่มต้นของ Promise ถ้าทำงานสำเร็จ = resolve ถ้าล้มเหลว = reject
            - resolve/fulfilled : เป็นพารามิเตอร์ของ callback ซึ่งใช้กำหนดสถานะถ้าทำงาน "สำเร็จ"
            - reject : เป็นพารามิเตอร์ของ callback ซึ่งใช้กำหนดสถานะหากทำงาน "ผิดพลาด"

    - then(), catch(), finally()
        การทำงานของ Promises ระหว่างที่ตรวจสอบสถานะของ Promises อยู่ว่าเป็น resolve หรือ reject สามารถกำหนดขั้นตอนต่อไปในการทำงานได้
        1. then() ใช้งานร่วมกับ resolve หรือเมื่อทำงานสำเร็จ
        2. catch() ใช้งานร่วมกับ reject หรือเมื่อทำงานผิดพลาด
        3. finally() ไม่ว่าผลลัพธ์จะเป็นอย่างไร ก็ให้ทำงานที่ส่วนนี้ต่อเลย

Async & Await
    Async : ระบุว่าเป็นโค้ดที่สามารถทำงานไปพร้อมกันได้
    Await : ระบุว่าเป็นโค้ดที่จำเป็นต้องรอให้ทำงานให้เสร็จก่อน แล้วจึงเริ่มทำคำสั่งถัดไป